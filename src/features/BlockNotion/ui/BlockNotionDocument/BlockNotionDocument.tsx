import { CreateBlockNodeDto } from '@/shared/api/generated/data-contracts';
import { Button } from '@/shared/ui';
import { BlockNotionBlock } from '../BlockNotionBlock';
import { useBlockNodeListQuery } from '../../hooks/useBlockNodeListQuery';

type TProps = {
  documentId: string;
};

/** –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–Ω–¥–µ—Ä –î–æ–∫—É–º–µ–Ω—Ç–∞ –±–ª–æ–∫–Ω–æ—É—à–Ω–∞. */
export const BlockNotionDocument = ({ documentId }: TProps) => {
  const queryKey = ['blockNodes', documentId];
  const { data, status, addNode, isAdding } = useBlockNodeListQuery(queryKey);
  const handleCreateBlockNode = () => {
    const content = window.prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–∑–ª–∞:', '')?.trim();

    if (content == null || content === '') return;

    // TODO - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —Ç–∏–ø –±–ª–æ–∫–∞
    const nodeData: CreateBlockNodeDto = {
      parentId: '',
      position: 0,
      documentId,
      blocktype: 'text',
      content,
    };

    addNode(nodeData);
  };

  if (status === 'pending') {
    return 'loading...';
  }

  if (status === 'error') {
    return 'error ;(';
  }

  return (
    <article>
      <div>–≠—Ç–æ –ø–∞–∫ –±–ª–æ–∫–Ω–æ–¥–æ–≤</div>
      <ul>
        {!data || data.length === 0 ? (
          <div>–ü—É—Å—Ç–æ –ø–æ–∫–∞ :(</div>
        ) : (
          data.map((item) => (
            <li className="pb-2 mb-2" key={item.id}>
              <BlockNotionBlock item={item} />
            </li>
          ))
        )}
      </ul>
      <Button
        className="mt-5 cursor-pointer"
        title="create new block"
        variant={'outline'}
        onClick={handleCreateBlockNode}
      >
        {isAdding ? 'üîÉ' : '‚ûï'}
      </Button>
    </article>
  );
};
