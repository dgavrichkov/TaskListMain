// –¢–∏–ø—ã –±–ª–æ–∫–æ–≤
type TextData = string;

type ImageData = {
  url: string;
  alt?: string;
  width?: number;
  height?: number;
  caption?: string; // –∏–ª–∏ captionBlocks?: string[] ids –Ω–∞ –¥–µ—Ç–µ–π
};

type PageLinkData = {
  pageId: string; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç/—Å—Ç—Ä–∞–Ω–∏—Ü—É
  title?: string;
};

type CalloutData = {
  icon?: string; // 'üí°' –∏–ª–∏ 'info'|'warn'|'error'
  color?: 'gray' | 'blue' | 'green' | 'yellow' | 'red' | 'purple' | 'pink' | 'orange';
  text?: string; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ ‚Äî —Ç–µ–∫—Å—Ç
  // –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å children –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö callout
};

type ListData = {
  style: 'bulleted' | 'numbered' | 'todo';
  // —Å–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ listItem-–¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
};

type ListItemData = {
  text: string;
  checked?: boolean; // –¥–ª—è todo
};

type QuoteData = {
  text: string;
  cite?: string;
};

type CodeData = {
  language?: string; // 'ts','js','bash',...
  code: string;
};

type DividerData = Record<string, never>;

export type BlockDataMap = {
  text: TextData;
  image: ImageData;
  pageLink: PageLinkData;
  callout: CalloutData;
  list: ListData;
  listItem: ListItemData;
  quote: QuoteData;
  code: CodeData;
  divider: DividerData;
};
